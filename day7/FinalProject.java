import java.util.*;
import java.util.stream.Collectors;

/**
 * Day 7 - Z√°r√≥ projekt: Online √°ruh√°z rendszer
 * 
 * Ez a f√°jl egy komplex z√°r√≥ projektet tartalmaz amely √∂sszek√∂ti az eddig tanultakat.
 * Minden feladatot meg kell oldani, majd a v√©g√©n l√©v≈ë tesztek seg√≠ts√©g√©vel ellen≈ërizheted.
 */

public class FinalProject {

    /**
     * 1) FELADAT: Product oszt√°ly l√©trehoz√°sa
     * 
     * C√©l: Hozz l√©tre egy Product oszt√°lyt amely egy √°ruh√°z term√©ket reprezent√°l
     * 
     * K√∂vetelm√©nyek:
     * - id (int) - egyedi azonos√≠t√≥
     * - name (String) - term√©k neve
     * - category (String) - kateg√≥ria (pl. "Electronics", "Books")
     * - price (double) - √°r
     * - stock (int) - rakt√°rk√©szlet
     * 
     * Met√≥dusok:
     * - Konstruktor az √∂sszes mez≈ëvel
     * - Getterek √©s setterek
     * - toString met√≥dus
     * - equals √©s hashCode (id alapj√°n)
     */
    public static class Product {
        // TODO: Implement√°ld itt a Product oszt√°lyt
        
        public Product(int id, String name, String category, double price, int stock) {
            // TODO: Konstruktor implement√°l√°sa
        }
        
        // TODO: Getterek
        public int getId() { return 0; }
        public String getName() { return null; }
        public String getCategory() { return null; }
        public double getPrice() { return 0.0; }
        public int getStock() { return 0; }
        
        // TODO: Setterek (√°r √©s k√©szlet friss√≠t√©s√©hez)
        public void setPrice(double price) { }
        public void setStock(int stock) { }
        
        @Override
        public String toString() {
            // TODO: Informat√≠v toString
            return "";
        }
        
        @Override
        public boolean equals(Object obj) {
            // TODO: equals implement√°l√°sa id alapj√°n
            return false;
        }
        
        @Override
        public int hashCode() {
            // TODO: hashCode implement√°l√°sa
            return 0;
        }
    }

    /**
     * 2) FELADAT: Store oszt√°ly - √°ruh√°z kezel≈ë
     * 
     * C√©l: Hozz l√©tre egy Store oszt√°lyt amely term√©keket kezel
     * 
     * K√∂vetelm√©nyek:
     * - T√°rolja a term√©keket Map<Integer, Product>-ban (id szerint)
     * - CRUD m≈±veletek: add, remove, update
     * - Keres√©si √©s sz≈±r√©si funkci√≥k
     * - Statisztikai met√≥dusok
     */
    public static class Store {
        // TODO: Implement√°ld itt a Store oszt√°lyt
        
        public Store() {
            // TODO: Konstruktor - inicializ√°ld a Map-et
        }
        
        /**
         * Term√©k hozz√°ad√°sa
         * Ha m√°r l√©tezik az id, ne adja hozz√° √∫jra
         */
        public boolean addProduct(Product product) {
            // TODO: Term√©k hozz√°ad√°sa
            return false;
        }
        
        /**
         * Term√©k elt√°vol√≠t√°sa id alapj√°n
         */
        public boolean removeProduct(int productId) {
            // TODO: Term√©k elt√°vol√≠t√°sa
            return false;
        }
        
        /**
         * Term√©k keres√©se id alapj√°n
         */
        public Product findProductById(int id) {
            // TODO: Term√©k keres√©se
            return null;
        }
        
        /**
         * Term√©k keres√©se n√©v alapj√°n
         */
        public Product findProductByName(String name) {
            // TODO: Term√©k keres√©se n√©v alapj√°n
            return null;
        }
        
        /**
         * Term√©kek kateg√≥ria alapj√°n
         */
        public List<Product> findProductsByCategory(String category) {
            // TODO: Kateg√≥ria alapj√°n sz≈±r√©s
            return new ArrayList<>();
        }
        
        /**
         * Rakt√°rk√©szlet friss√≠t√©se
         */
        public boolean updateStock(int productId, int newStock) {
            // TODO: K√©szlet friss√≠t√©se
            return false;
        }
        
        /**
         * √År friss√≠t√©se
         */
        public boolean updatePrice(int productId, double newPrice) {
            // TODO: √År friss√≠t√©se
            return false;
        }
        
        /**
         * √Åtlagos √°r sz√°m√≠t√°sa
         */
        public double getAveragePrice() {
            // TODO: √Åtlagos √°r sz√°m√≠t√°sa
            return 0.0;
        }
        
        /**
         * Legjobb √©rt√©k≈± term√©k (√°r alapj√°n)
         */
        public Product getMostExpensiveProduct() {
            // TODO: Legdr√°g√°bb term√©k
            return null;
        }
        
        /**
         * Alacsony k√©szlet≈± term√©kek (k√©szlet < threshold)
         */
        public List<Product> getLowStockProducts(int threshold) {
            // TODO: Alacsony k√©szlet≈± term√©kek
            return new ArrayList<>();
        }
        
        /**
         * √ñsszes term√©k sz√°ma
         */
        public int getTotalProductCount() {
            // TODO: Term√©kek sz√°ma
            return 0;
        }
        
        /**
         * √ñsszes term√©k √©rt√©ke (√°r * k√©szlet √∂sszege)
         */
        public double getTotalInventoryValue() {
            // TODO: Teljes k√©szlet √©rt√©ke
            return 0.0;
        }
    }

    /**
     * 3) FELADAT: Gyors k√≥dol√°si kih√≠v√°sok
     * 
     * Implement√°ld √∫jra gyorsan ezeket a kor√°bbi feladatokat
     * (Szimul√°lva egy 15 perces interview k√∂rt)
     */
    
    /**
     * Speed Challenge 1: FizzBuzz (2 perc)
     */
    public static String[] speedFizzBuzz(int n) {
        // TODO: Gyors FizzBuzz implement√°ci√≥
        return new String[0];
    }
    
    /**
     * Speed Challenge 2: Palindr√≥ma ellen≈ërz√©s (3 perc)
     */
    public static boolean speedIsPalindrome(String s) {
        // TODO: Gyors palindr√≥ma ellen≈ërz√©s
        return false;
    }
    
    /**
     * Speed Challenge 3: T√∂mb rendez√©s (5 perc)
     */
    public static int[] speedSort(int[] arr) {
        // TODO: Gyors rendez√©s (b√°rmely algoritmussal)
        return arr.clone();
    }

    // ===============================
    // TESZTEK - Ne m√≥dos√≠tsd ezeket!
    // ===============================

    public static void main(String[] args) {
        System.out.println("=== Z√ÅR√ì PROJEKT TESZTEK ===\n");
        
        runProductTests();
        runStoreTests();
        runSpeedChallenges();
        
        System.out.println("\n=== üéâ GRATUL√ÅLOK! MINDEN TESZT BEFEJEZVE! üéâ ===");
    }

    private static void runProductTests() {
        System.out.println("1. PRODUCT OSZT√ÅLY TESZTEK:");
        
        // Test 1: Konstruktor √©s getterek
        Product product = new Product(1, "Laptop", "Electronics", 999.99, 5);
        testProductProperties(product, 1, "Laptop", "Electronics", 999.99, 5, "konstruktor √©s getterek");
        
        // Test 2: Setterek
        product.setPrice(899.99);
        product.setStock(3);
        testProductProperties(product, 1, "Laptop", "Electronics", 899.99, 3, "setterek ut√°n");
        
        // Test 3: equals √©s hashCode
        Product product2 = new Product(1, "Different Name", "Different Category", 1.0, 1);
        testProductEquals(product, product2, true, "equals ugyanazzal az id-val");
        
        Product product3 = new Product(2, "Laptop", "Electronics", 999.99, 5);
        testProductEquals(product, product3, false, "equals k√ºl√∂nb√∂z≈ë id-val");
        
        System.out.println();
    }

    private static void runStoreTests() {
        System.out.println("2. STORE OSZT√ÅLY TESZTEK:");
        
        Store store = new Store();
        
        // Term√©kek l√©trehoz√°sa tesztel√©shez
        Product laptop = new Product(1, "Laptop", "Electronics", 999.99, 5);
        Product mouse = new Product(2, "Mouse", "Electronics", 25.99, 50);
        Product book = new Product(3, "Java Book", "Books", 39.99, 10);
        Product phone = new Product(4, "Phone", "Electronics", 699.99, 2);
        
        // Test 1: Term√©kek hozz√°ad√°sa
        testStoreAdd(store, laptop, true, "laptop hozz√°ad√°sa");
        testStoreAdd(store, mouse, true, "mouse hozz√°ad√°sa");
        testStoreAdd(store, book, true, "k√∂nyv hozz√°ad√°sa");
        testStoreAdd(store, phone, true, "telefon hozz√°ad√°sa");
        
        // Test 2: Duplik√°lt ID
        Product duplicateLaptop = new Product(1, "Another Laptop", "Electronics", 1200.00, 3);
        testStoreAdd(store, duplicateLaptop, false, "duplik√°lt ID hozz√°ad√°sa");
        
        // Test 3: Keres√©sek
        testStoreFindById(store, 1, "Laptop", "ID alapj√°n keres√©s");
        testStoreFindByName(store, "Mouse", 2, "n√©v alapj√°n keres√©s");
        testStoreFindByCategory(store, "Electronics", 3, "kateg√≥ria alapj√°n keres√©s");
        
        // Test 4: Friss√≠t√©sek
        testStoreUpdateStock(store, 1, 8, true, "k√©szlet friss√≠t√©se");
        testStoreUpdatePrice(store, 2, 19.99, true, "√°r friss√≠t√©se");
        
        // Test 5: Statisztik√°k
        testStoreStatistics(store);
        
        // Test 6: Alacsony k√©szlet
        testStoreLowStock(store, 5, 1, "alacsony k√©szlet keres√©se");
        
        System.out.println();
    }

    private static void runSpeedChallenges() {
        System.out.println("3. GYORS K√ìDOL√ÅSI KIH√çV√ÅSOK:");
        
        // Speed Challenge 1: FizzBuzz
        String[] fizzBuzzResult = speedFizzBuzz(15);
        String[] expectedFizzBuzz = {"1", "2", "Fizz", "4", "Buzz", "Fizz", "7", "8", "Fizz", "Buzz", "11", "Fizz", "13", "14", "FizzBuzz"};
        testSpeedChallenge("FizzBuzz", Arrays.equals(fizzBuzzResult, expectedFizzBuzz), 
                          Arrays.toString(fizzBuzzResult), Arrays.toString(expectedFizzBuzz));
        
        // Speed Challenge 2: Palindr√≥ma
        boolean palindromeResult1 = speedIsPalindrome("racecar");
        boolean palindromeResult2 = speedIsPalindrome("hello");
        testSpeedChallenge("Palindr√≥ma racecar", palindromeResult1 == true, 
                          String.valueOf(palindromeResult1), "true");
        testSpeedChallenge("Palindr√≥ma hello", palindromeResult2 == false, 
                          String.valueOf(palindromeResult2), "false");
        
        // Speed Challenge 3: Rendez√©s
        int[] sortResult = speedSort(new int[]{5, 2, 8, 1, 9});
        int[] expectedSort = {1, 2, 5, 8, 9};
        testSpeedChallenge("Rendez√©s", Arrays.equals(sortResult, expectedSort), 
                          Arrays.toString(sortResult), Arrays.toString(expectedSort));
        
        System.out.println();
    }

    // Seg√©d met√≥dusok a tesztel√©shez
    private static void testProductProperties(Product product, int expectedId, String expectedName, 
                                            String expectedCategory, double expectedPrice, int expectedStock, 
                                            String description) {
        boolean allCorrect = product.getId() == expectedId &&
                           expectedName.equals(product.getName()) &&
                           expectedCategory.equals(product.getCategory()) &&
                           Math.abs(product.getPrice() - expectedPrice) < 0.01 &&
                           product.getStock() == expectedStock;
        
        String status = allCorrect ? "‚úÖ PASS" : "‚ùå FAIL";
        System.out.printf("   %s - %s: id:%d n√©v:%s kateg√≥ria:%s √°r:%.2f k√©szlet:%d\n", 
                         status, description, product.getId(), product.getName(), 
                         product.getCategory(), product.getPrice(), product.getStock());
    }

    private static void testProductEquals(Product p1, Product p2, boolean expected, String description) {
        boolean result = p1.equals(p2);
        String status = result == expected ? "‚úÖ PASS" : "‚ùå FAIL";
        System.out.printf("   %s - %s: %s (v√°rt: %s)\n", status, description, result, expected);
    }

    private static void testStoreAdd(Store store, Product product, boolean expected, String description) {
        boolean result = store.addProduct(product);
        String status = result == expected ? "‚úÖ PASS" : "‚ùå FAIL";
        System.out.printf("   %s - %s: %s (v√°rt: %s)\n", status, description, result, expected);
    }

    private static void testStoreFindById(Store store, int id, String expectedName, String description) {
        Product result = store.findProductById(id);
        boolean isCorrect = result != null && expectedName.equals(result.getName());
        String status = isCorrect ? "‚úÖ PASS" : "‚ùå FAIL";
        String resultName = result != null ? result.getName() : "null";
        System.out.printf("   %s - %s: %s (v√°rt: %s)\n", status, description, resultName, expectedName);
    }

    private static void testStoreFindByName(Store store, String name, int expectedId, String description) {
        Product result = store.findProductByName(name);
        boolean isCorrect = result != null && result.getId() == expectedId;
        String status = isCorrect ? "‚úÖ PASS" : "‚ùå FAIL";
        int resultId = result != null ? result.getId() : -1;
        System.out.printf("   %s - %s: %d (v√°rt: %d)\n", status, description, resultId, expectedId);
    }

    private static void testStoreFindByCategory(Store store, String category, int expectedCount, String description) {
        List<Product> result = store.findProductsByCategory(category);
        boolean isCorrect = result.size() == expectedCount;
        String status = isCorrect ? "‚úÖ PASS" : "‚ùå FAIL";
        System.out.printf("   %s - %s: %d term√©k (v√°rt: %d)\n", status, description, result.size(), expectedCount);
    }

    private static void testStoreUpdateStock(Store store, int id, int newStock, boolean expected, String description) {
        boolean result = store.updateStock(id, newStock);
        String status = result == expected ? "‚úÖ PASS" : "‚ùå FAIL";
        System.out.printf("   %s - %s: %s (v√°rt: %s)\n", status, description, result, expected);
    }

    private static void testStoreUpdatePrice(Store store, int id, double newPrice, boolean expected, String description) {
        boolean result = store.updatePrice(id, newPrice);
        String status = result == expected ? "‚úÖ PASS" : "‚ùå FAIL";
        System.out.printf("   %s - %s: %s (v√°rt: %s)\n", status, description, result, expected);
    }

    private static void testStoreStatistics(Store store) {
        int count = store.getTotalProductCount();
        double avgPrice = store.getAveragePrice();
        double totalValue = store.getTotalInventoryValue();
        Product mostExpensive = store.getMostExpensiveProduct();
        
        System.out.printf("   üìä STATISZTIK√ÅK - term√©kek: %d, √°tlag √°r: %.2f, k√©szlet √©rt√©k: %.2f\n", 
                         count, avgPrice, totalValue);
        if (mostExpensive != null) {
            System.out.printf("   üìä Legdr√°g√°bb: %s (%.2f)\n", 
                             mostExpensive.getName(), mostExpensive.getPrice());
        }
    }

    private static void testStoreLowStock(Store store, int threshold, int expectedCount, String description) {
        List<Product> result = store.getLowStockProducts(threshold);
        boolean isCorrect = result.size() == expectedCount;
        String status = isCorrect ? "‚úÖ PASS" : "‚ùå FAIL";
        System.out.printf("   %s - %s: %d term√©k (v√°rt: %d)\n", status, description, result.size(), expectedCount);
    }

    private static void testSpeedChallenge(String challengeName, boolean isCorrect, String result, String expected) {
        String status = isCorrect ? "‚úÖ PASS" : "‚ùå FAIL";
        System.out.printf("   %s - %s: %s (v√°rt: %s)\n", status, challengeName, result, expected);
    }
}